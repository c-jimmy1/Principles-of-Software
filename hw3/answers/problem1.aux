\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Problem 1}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Classify each public method of RatNum as either a creator, observer, producer, or mutator.}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}add, sub, mul, and div all require that arg != null. This is because all of these methods access fields of arg without checking if arg is null first. But these methods also access fields of this without checking for null; why is this != null absent from the requires clause for these methods?}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Why is RatNum.valueOf(String) a class method (has \texttt  {static} modifier)? What alternative to class methods would allow someone to accomplish the same goal of generating a RatNum from an input String?}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}add, sub, mul, and div all end with a statement of the form return new RatNum (numerExpr, denomExpr);. Imagine an implementation of the same function except the last statement is: \texttt  { \\ this.numer = numerExpr; \\ this.denom = denomExpr; \\ return this; } \\For this question, pretend that the this.numer and this.denom fields are not declared as final so that these assignments compile properly. How would the above changes fail to meet the specifications of the function (hint: take a look at the @requires and @modifies clauses, or lack thereof) and fail to meet the specifications of the RatNum class?}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}Calls to checkRep() are supposed to catch violations in the classesâ€™ invariants. In general, it is recommended to call checkRep() at the beginning and end of every method. In the case of RatNum, why is it sufficient to call checkRep() only at the end of constructors? (Hint: could a method ever modify a RatNum such that it violates its representation invariant? Could a method change a RatNum at all? How are changes to instances of RatNum prevented?)}{3}{}\protected@file@percent }
\gdef \@abspage@last{3}
